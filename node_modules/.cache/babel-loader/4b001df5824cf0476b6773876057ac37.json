{"ast":null,"code":"'use strict';\n\nvar protocol = require('./amqp-definitions-0-9-1'); // a look up table for methods recieved\n// indexed on class id, method id\n\n\nvar methodTable = {}; // methods keyed on their name\n\nvar methods = {}; // classes keyed on their index\n\nvar classes = {};\n\n(function () {\n  // anon scope for init\n  //debug(\"initializing amqp methods...\");\n  for (var i = 0; i < protocol.classes.length; i++) {\n    var classInfo = protocol.classes[i];\n    classes[classInfo.index] = classInfo;\n\n    for (var j = 0; j < classInfo.methods.length; j++) {\n      var methodInfo = classInfo.methods[j];\n      var name = classInfo.name + methodInfo.name[0].toUpperCase() + methodInfo.name.slice(1); //debug(name);\n\n      var method = {\n        name: name,\n        fields: methodInfo.fields,\n        methodIndex: methodInfo.index,\n        classIndex: classInfo.index\n      };\n      if (!methodTable[classInfo.index]) methodTable[classInfo.index] = {};\n      methodTable[classInfo.index][methodInfo.index] = method;\n      methods[name] = method;\n    }\n  }\n})();\n\nmodule.exports = {\n  methods: methods,\n  classes: classes,\n  methodTable: methodTable\n};","map":{"version":3,"sources":["/Users/alexyang/Desktop/todolist/Traffic-Generator/node_modules/amqp/lib/definitions.js"],"names":["protocol","require","methodTable","methods","classes","i","length","classInfo","index","j","methodInfo","name","toUpperCase","slice","method","fields","methodIndex","classIndex","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAtB,C,CAEA;AACA;;;AACA,IAAIC,WAAW,GAAG,EAAlB,C,CAEA;;AACA,IAAIC,OAAO,GAAG,EAAd,C,CAEA;;AACA,IAAIC,OAAO,GAAG,EAAd;;AAEA,CAAC,YAAY;AAAE;AACb;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,QAAQ,CAACI,OAAT,CAAiBE,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,QAAIE,SAAS,GAAGP,QAAQ,CAACI,OAAT,CAAiBC,CAAjB,CAAhB;AACAD,IAAAA,OAAO,CAACG,SAAS,CAACC,KAAX,CAAP,GAA2BD,SAA3B;;AAEA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACJ,OAAV,CAAkBG,MAAtC,EAA8CG,CAAC,EAA/C,EAAmD;AACjD,UAAIC,UAAU,GAAGH,SAAS,CAACJ,OAAV,CAAkBM,CAAlB,CAAjB;AAEA,UAAIE,IAAI,GAAGJ,SAAS,CAACI,IAAV,GACTD,UAAU,CAACC,IAAX,CAAgB,CAAhB,EAAmBC,WAAnB,EADS,GAETF,UAAU,CAACC,IAAX,CAAgBE,KAAhB,CAAsB,CAAtB,CAFF,CAHiD,CAOjD;;AAEA,UAAIC,MAAM,GAAG;AACXH,QAAAA,IAAI,EAAEA,IADK;AAEXI,QAAAA,MAAM,EAAEL,UAAU,CAACK,MAFR;AAGXC,QAAAA,WAAW,EAAEN,UAAU,CAACF,KAHb;AAIXS,QAAAA,UAAU,EAAEV,SAAS,CAACC;AAJX,OAAb;AAOA,UAAI,CAACN,WAAW,CAACK,SAAS,CAACC,KAAX,CAAhB,EAAmCN,WAAW,CAACK,SAAS,CAACC,KAAX,CAAX,GAA+B,EAA/B;AACnCN,MAAAA,WAAW,CAACK,SAAS,CAACC,KAAX,CAAX,CAA6BE,UAAU,CAACF,KAAxC,IAAiDM,MAAjD;AACAX,MAAAA,OAAO,CAACQ,IAAD,CAAP,GAAgBG,MAAhB;AACD;AACF;AACF,CA5BD;;AA8BAI,MAAM,CAACC,OAAP,GAAiB;AAAChB,EAAAA,OAAO,EAAEA,OAAV;AAAmBC,EAAAA,OAAO,EAAEA,OAA5B;AAAqCF,EAAAA,WAAW,EAAEA;AAAlD,CAAjB","sourcesContent":["'use strict';\n\nvar protocol = require('./amqp-definitions-0-9-1');\n\n// a look up table for methods recieved\n// indexed on class id, method id\nvar methodTable = {};\n\n// methods keyed on their name\nvar methods = {};\n\n// classes keyed on their index\nvar classes = {};\n\n(function () { // anon scope for init\n  //debug(\"initializing amqp methods...\");\n\n  for (var i = 0; i < protocol.classes.length; i++) {\n    var classInfo = protocol.classes[i];\n    classes[classInfo.index] = classInfo;\n\n    for (var j = 0; j < classInfo.methods.length; j++) {\n      var methodInfo = classInfo.methods[j];\n\n      var name = classInfo.name +\n        methodInfo.name[0].toUpperCase() +\n        methodInfo.name.slice(1);\n\n      //debug(name);\n\n      var method = {\n        name: name,\n        fields: methodInfo.fields,\n        methodIndex: methodInfo.index,\n        classIndex: classInfo.index\n      };\n\n      if (!methodTable[classInfo.index]) methodTable[classInfo.index] = {};\n      methodTable[classInfo.index][methodInfo.index] = method;\n      methods[name] = method;\n    }\n  }\n})();\n\nmodule.exports = {methods: methods, classes: classes, methodTable: methodTable};\n"]},"metadata":{},"sourceType":"script"}