{"ast":null,"code":"'use strict';\n\nvar events = require('events'),\n    util = require('util'),\n    fs = require('fs'),\n    protocol,\n    definitions = require('./definitions'); // Properties:\n// - routingKey\n// - size\n// - deliveryTag\n//\n// - contentType (default 'application/octet-stream')\n// - contentEncoding\n// - headers\n// - deliveryMode\n// - priority (0-9)\n// - correlationId\n// - replyTo\n// - experation\n// - messageId\n// - timestamp\n// - userId\n// - appId\n// - clusterId\n\n\nvar Message = module.exports = function Message(queue, args) {\n  var msgProperties = definitions.classes[60].fields;\n  events.EventEmitter.call(this);\n  this.queue = queue;\n  this.deliveryTag = args.deliveryTag;\n  this.redelivered = args.redelivered;\n  this.exchange = args.exchange;\n  this.routingKey = args.routingKey;\n  this.consumerTag = args.consumerTag;\n\n  for (var i = 0, l = msgProperties.length; i < l; i++) {\n    if (args[msgProperties[i].name]) {\n      this[msgProperties[i].name] = args[msgProperties[i].name];\n    }\n  }\n};\n\nutil.inherits(Message, events.EventEmitter); // Acknowledge receipt of message.\n// Set first arg to 'true' to acknowledge this and all previous messages\n// received on this queue.\n\nMessage.prototype.acknowledge = function (all) {\n  this.queue.connection._sendMethod(this.queue.channel, definitions.methods.basicAck, {\n    reserved1: 0,\n    deliveryTag: this.deliveryTag,\n    multiple: all ? true : false\n  });\n}; // Reject an incoming message.\n// Set first arg to 'true' to requeue the message.\n\n\nMessage.prototype.reject = function (requeue) {\n  this.queue.connection._sendMethod(this.queue.channel, definitions.methods.basicReject, {\n    deliveryTag: this.deliveryTag,\n    requeue: requeue ? true : false\n  });\n};","map":{"version":3,"sources":["/Users/alexyang/Desktop/todolist/Traffic-Generator/node_modules/amqp/lib/message.js"],"names":["events","require","util","fs","protocol","definitions","Message","module","exports","queue","args","msgProperties","classes","fields","EventEmitter","call","deliveryTag","redelivered","exchange","routingKey","consumerTag","i","l","length","name","inherits","prototype","acknowledge","all","connection","_sendMethod","channel","methods","basicAck","reserved1","multiple","reject","requeue","basicReject"],"mappings":"AAAA;;AACA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;AAAA,IACIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CADlB;AAAA,IAEIE,EAAE,GAAGF,OAAO,CAAC,IAAD,CAFhB;AAAA,IAGIG,QAHJ;AAAA,IAIIC,WAAW,GAAGJ,OAAO,CAAC,eAAD,CAJzB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIK,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB,SAASF,OAAT,CAAkBG,KAAlB,EAAyBC,IAAzB,EAA+B;AAC5D,MAAIC,aAAa,GAAGN,WAAW,CAACO,OAAZ,CAAoB,EAApB,EAAwBC,MAA5C;AAEAb,EAAAA,MAAM,CAACc,YAAP,CAAoBC,IAApB,CAAyB,IAAzB;AAEA,OAAKN,KAAL,GAAaA,KAAb;AAEA,OAAKO,WAAL,GAAmBN,IAAI,CAACM,WAAxB;AACA,OAAKC,WAAL,GAAmBP,IAAI,CAACO,WAAxB;AACA,OAAKC,QAAL,GAAmBR,IAAI,CAACQ,QAAxB;AACA,OAAKC,UAAL,GAAmBT,IAAI,CAACS,UAAxB;AACA,OAAKC,WAAL,GAAmBV,IAAI,CAACU,WAAxB;;AAEA,OAAK,IAAIC,CAAC,GAAC,CAAN,EAASC,CAAC,GAACX,aAAa,CAACY,MAA9B,EAAsCF,CAAC,GAACC,CAAxC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,QAAIX,IAAI,CAACC,aAAa,CAACU,CAAD,CAAb,CAAiBG,IAAlB,CAAR,EAAiC;AAC/B,WAAKb,aAAa,CAACU,CAAD,CAAb,CAAiBG,IAAtB,IAA8Bd,IAAI,CAACC,aAAa,CAACU,CAAD,CAAb,CAAiBG,IAAlB,CAAlC;AACD;AACF;AACF,CAlBD;;AAmBAtB,IAAI,CAACuB,QAAL,CAAcnB,OAAd,EAAuBN,MAAM,CAACc,YAA9B,E,CAGA;AACA;AACA;;AACAR,OAAO,CAACoB,SAAR,CAAkBC,WAAlB,GAAgC,UAAUC,GAAV,EAAe;AAC7C,OAAKnB,KAAL,CAAWoB,UAAX,CAAsBC,WAAtB,CAAkC,KAAKrB,KAAL,CAAWsB,OAA7C,EAAsD1B,WAAW,CAAC2B,OAAZ,CAAoBC,QAA1E,EACI;AAAEC,IAAAA,SAAS,EAAE,CAAb;AACElB,IAAAA,WAAW,EAAE,KAAKA,WADpB;AAEEmB,IAAAA,QAAQ,EAAEP,GAAG,GAAG,IAAH,GAAU;AAFzB,GADJ;AAKD,CAND,C,CAQA;AACA;;;AACAtB,OAAO,CAACoB,SAAR,CAAkBU,MAAlB,GAA2B,UAAUC,OAAV,EAAmB;AAC5C,OAAK5B,KAAL,CAAWoB,UAAX,CAAsBC,WAAtB,CAAkC,KAAKrB,KAAL,CAAWsB,OAA7C,EAAsD1B,WAAW,CAAC2B,OAAZ,CAAoBM,WAA1E,EACI;AAAEtB,IAAAA,WAAW,EAAE,KAAKA,WAApB;AACEqB,IAAAA,OAAO,EAAEA,OAAO,GAAG,IAAH,GAAU;AAD5B,GADJ;AAID,CALD","sourcesContent":["'use strict';\nvar events = require('events'),\n    util = require('util'),\n    fs = require('fs'),\n    protocol,\n    definitions = require('./definitions');\n\n// Properties:\n// - routingKey\n// - size\n// - deliveryTag\n//\n// - contentType (default 'application/octet-stream')\n// - contentEncoding\n// - headers\n// - deliveryMode\n// - priority (0-9)\n// - correlationId\n// - replyTo\n// - experation\n// - messageId\n// - timestamp\n// - userId\n// - appId\n// - clusterId\nvar Message = module.exports = function Message (queue, args) {\n  var msgProperties = definitions.classes[60].fields;\n\n  events.EventEmitter.call(this);\n\n  this.queue = queue;\n\n  this.deliveryTag = args.deliveryTag;\n  this.redelivered = args.redelivered;\n  this.exchange    = args.exchange;\n  this.routingKey  = args.routingKey;\n  this.consumerTag = args.consumerTag;\n\n  for (var i=0, l=msgProperties.length; i<l; i++) {\n    if (args[msgProperties[i].name]) {\n      this[msgProperties[i].name] = args[msgProperties[i].name];\n    }\n  }\n};\nutil.inherits(Message, events.EventEmitter);\n\n\n// Acknowledge receipt of message.\n// Set first arg to 'true' to acknowledge this and all previous messages\n// received on this queue.\nMessage.prototype.acknowledge = function (all) {\n  this.queue.connection._sendMethod(this.queue.channel, definitions.methods.basicAck,\n      { reserved1: 0\n      , deliveryTag: this.deliveryTag\n      , multiple: all ? true : false\n      });\n};\n\n// Reject an incoming message.\n// Set first arg to 'true' to requeue the message.\nMessage.prototype.reject = function (requeue) {\n  this.queue.connection._sendMethod(this.queue.channel, definitions.methods.basicReject,\n      { deliveryTag: this.deliveryTag\n      , requeue: requeue ? true : false\n      });\n};\n\n"]},"metadata":{},"sourceType":"script"}